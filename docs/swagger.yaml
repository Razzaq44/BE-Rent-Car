basePath: /api/v1
definitions:
  models.Brand:
    enum:
    - Toyota
    - Honda
    - Mercedes
    - Wuling
    - Mitsubishi
    - Volkswagen
    - Jeep
    - Subaru
    - Hyundai
    - Kia
    - Renault
    - Volvo
    - Chevrolet
    - Ford
    - BMW
    type: string
    x-enum-varnames:
    - Toyota
    - Honda
    - Mercedes
    - Wuling
    - Mitsubishi
    - Volkswagen
    - Jeep
    - Subaru
    - Hyundai
    - Kia
    - Renault
    - Volvo
    - Chevrolet
    - Ford
    - BMW
  models.CarCategory:
    enum:
    - City Car
    - LCGC
    - Compact
    - MPV
    - SUV
    - Crossover
    type: string
    x-enum-varnames:
    - CityCar
    - LCGC
    - Compact
    - MPV
    - SUV
    - Crossover
  models.Permission:
    description: Permission entity model for Role-Based Access Control
    properties:
      action:
        allOf:
        - $ref: '#/definitions/models.PermissionAction'
        description: |-
          Permission action
          @Description Action type of the permission
          @Example "create"
        example: create
      category:
        allOf:
        - $ref: '#/definitions/models.PermissionCategory'
        description: |-
          Permission category
          @Description Category of the permission
          @Example "user"
        example: user
      created_at:
        description: |-
          Timestamps
          @Description Creation timestamp
          @Example "2023-01-01T00:00:00Z"
        example: "2023-01-01T00:00:00Z"
        type: string
      description:
        description: |-
          Permission description
          @Description Description of what this permission allows
          @Example "Allows creating new users in the system"
        example: Allows creating new users in the system
        maxLength: 500
        type: string
      display_name:
        description: |-
          Permission display name
          @Description Human-readable permission name
          @Example "Create User"
        example: Create User
        maxLength: 100
        minLength: 3
        type: string
      id:
        description: |-
          Primary key
          @Description Unique identifier
          @Example 1
        example: 1
        type: integer
      is_active:
        description: |-
          Active status
          @Description Whether the permission is active
          @Example true
        example: true
        type: boolean
      is_system:
        description: |-
          System permission flag (cannot be deleted)
          @Description Whether this is a system permission (cannot be deleted)
          @Example true
        example: true
        type: boolean
      level:
        description: |-
          Permission level (for hierarchy)
          @Description Permission level for hierarchy (higher number = more privileged)
          @Example 10
        example: 10
        maximum: 100
        minimum: 0
        type: integer
      name:
        description: |-
          Permission name (unique identifier)
          @Description Unique permission name
          @Example "user.create"
        example: user.create
        maxLength: 100
        minLength: 3
        type: string
      resource:
        description: |-
          Resource pattern (for fine-grained permissions)
          @Description Resource pattern for fine-grained access control
          @Example "users/*" or "cars/own" or "*"
        example: '*'
        maxLength: 100
        type: string
      roles:
        description: |-
          Roles relationship
          @Description Roles that have this permission
        items:
          $ref: '#/definitions/models.Role'
        type: array
      updated_at:
        description: |-
          @Description Last update timestamp
          @Example "2023-01-01T00:00:00Z"
        example: "2023-01-01T00:00:00Z"
        type: string
    required:
    - action
    - category
    - display_name
    - name
    type: object
  models.PermissionAction:
    enum:
    - create
    - read
    - update
    - delete
    - manage
    - all
    type: string
    x-enum-varnames:
    - PermissionActionCreate
    - PermissionActionRead
    - PermissionActionUpdate
    - PermissionActionDelete
    - PermissionActionManage
    - PermissionActionAll
  models.PermissionCategory:
    enum:
    - user
    - car
    - product
    - role
    - system
    - report
    type: string
    x-enum-varnames:
    - PermissionCategoryUser
    - PermissionCategoryCar
    - PermissionCategoryProduct
    - PermissionCategoryRole
    - PermissionCategorySystem
    - PermissionCategoryReport
  models.Role:
    description: Role entity model for Role-Based Access Control
    properties:
      children:
        description: |-
          Child roles relationship
          @Description Child roles in hierarchy
        items:
          $ref: '#/definitions/models.Role'
        type: array
      created_at:
        description: |-
          Timestamps
          @Description Creation timestamp
          @Example "2023-01-01T00:00:00Z"
        example: "2023-01-01T00:00:00Z"
        type: string
      description:
        description: |-
          Role description
          @Description Description of the role
          @Example "Full system administrator with all permissions"
        example: Full system administrator with all permissions
        maxLength: 500
        type: string
      display_name:
        description: |-
          Role display name
          @Description Human-readable role name
          @Example "Administrator"
        example: Administrator
        maxLength: 100
        minLength: 2
        type: string
      id:
        description: |-
          Primary key
          @Description Unique identifier
          @Example 1
        example: 1
        type: integer
      is_active:
        description: |-
          Active status
          @Description Whether the role is active
          @Example true
        example: true
        type: boolean
      is_system:
        description: |-
          System role flag (cannot be deleted)
          @Description Whether this is a system role (cannot be deleted)
          @Example false
        example: false
        type: boolean
      level:
        description: |-
          Role level for hierarchy
          @Description Role level for hierarchy (higher number = higher privilege)
          @Example 100
        example: 100
        maximum: 1000
        minimum: 0
        type: integer
      name:
        description: |-
          Role name
          @Description Unique role name
          @Example "admin"
        example: admin
        maxLength: 50
        minLength: 2
        type: string
      parent:
        allOf:
        - $ref: '#/definitions/models.Role'
        description: |-
          Parent role relationship
          @Description Parent role for hierarchy
      parent_id:
        description: |-
          Parent role ID for hierarchy
          @Description Parent role ID for role hierarchy
          @Example 1
        example: 1
        type: integer
      permissions:
        description: |-
          Permissions relationship
          @Description Permissions assigned to this role
        items:
          $ref: '#/definitions/models.Permission'
        type: array
      type:
        allOf:
        - $ref: '#/definitions/models.RoleType'
        description: |-
          Role type
          @Description Type of role (system or custom)
          @Example "system"
        example: system
      updated_at:
        description: |-
          @Description Last update timestamp
          @Example "2023-01-01T00:00:00Z"
        example: "2023-01-01T00:00:00Z"
        type: string
      users:
        description: |-
          Users relationship
          @Description Users assigned to this role
        items:
          $ref: '#/definitions/models.User'
        type: array
    required:
    - display_name
    - name
    type: object
  models.RoleType:
    enum:
    - system
    - custom
    type: string
    x-enum-varnames:
    - RoleTypeSystem
    - RoleTypeCustom
  models.TransmissionType:
    enum:
    - Automatic
    - Manual
    type: string
    x-enum-varnames:
    - Automatic
    - Manual
  models.User:
    description: User entity model for authentication
    properties:
      created_at:
        description: |-
          Timestamps
          @Description Creation timestamp
          @Example "2023-01-01T00:00:00Z"
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        description: |-
          Email address
          @Description User's email address
          @Example "john@example.com"
        example: john@example.com
        maxLength: 100
        type: string
      email_verified:
        description: |-
          Email verification
          @Description Whether email is verified
          @Example true
        example: false
        type: boolean
      full_name:
        description: |-
          Full name
          @Description User's full name
          @Example "John Doe"
        example: John Doe
        maxLength: 100
        minLength: 2
        type: string
      id:
        description: |-
          Primary key
          @Description Unique identifier
          @Example 1
        example: 1
        type: integer
      last_login_at:
        description: |-
          Last login timestamp
          @Description Last login time
          @Example "2023-01-01T00:00:00Z"
        example: "2023-01-01T00:00:00Z"
        type: string
      phone_number:
        description: |-
          Phone number
          @Description User's phone number
          @Example "+1234567890"
        example: "+1234567890"
        maxLength: 20
        minLength: 10
        type: string
      roles:
        description: |-
          Roles relationship
          @Description User's roles
        items:
          $ref: '#/definitions/models.Role'
        type: array
      status:
        allOf:
        - $ref: '#/definitions/models.UserStatus'
        description: |-
          User status
          @Description Current status of the user
          @Example "active"
        example: active
      updated_at:
        description: |-
          @Description Last update timestamp
          @Example "2023-01-01T00:00:00Z"
        example: "2023-01-01T00:00:00Z"
        type: string
      username:
        description: |-
          Username for login
          @Description Unique username for authentication
          @Example "john_doe"
        example: john_doe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - full_name
    - username
    type: object
  models.UserStatus:
    enum:
    - active
    - inactive
    - suspended
    type: string
    x-enum-varnames:
    - UserStatusActive
    - UserStatusInactive
    - UserStatusSuspended
  requests.CreateCarRequest:
    description: Request payload for creating a new car
    properties:
      brand:
        allOf:
        - $ref: '#/definitions/models.Brand'
        description: |-
          Brand of the car
          @Description Brand of the car
          @Example "Toyota"
        enum:
        - Toyota
        - Honda
        - Mercedes
        - Wuling
        - Mitsubishi
        - Volkswagen
        - Jeep
        - Subaru
        - Hyundai
        - Kia
        - Renault
        - Volvo
        - Chevrolet
        - Ford
        - BMW
        example: Toyota
      category:
        allOf:
        - $ref: '#/definitions/models.CarCategory'
        description: |-
          Category of the car
          @Description Category of the car
          @Example "SUV"
        enum:
        - CityCar
        - LCGC
        - Compact
        - MPV
        - SUV
        - Crossover
        example: SUV
      description:
        description: |-
          Description of the car
          @Description Description of the car
          @Example "This is a sample car description"
        example: This is a sample car description
        maxLength: 500
        minLength: 10
        type: string
      is_available:
        description: |-
          Availability status of the car
          @Description Availability status of the car
          @Example true
        example: true
        type: boolean
      license_plate:
        description: |-
          License plate of the car
          @Description License plate of the car
          @Example "ABC123"
        example: ABC123
        maxLength: 10
        minLength: 3
        type: string
      machine_number:
        description: |-
          Machine number of the car
          @Description Machine number of the car
          @Example "123456"
        example: "123456"
        maxLength: 10
        minLength: 3
        type: string
      model:
        description: |-
          Model of the car
          @Description Model of the car
          @Example "Sample Model"
        example: Sample Model
        maxLength: 100
        minLength: 3
        type: string
      name:
        description: |-
          Name of the car
          @Description Name of the car
          @Example "Sample Car"
        example: Sample Car
        maxLength: 100
        minLength: 3
        type: string
      price_per_day:
        description: |-
          Price Per Day of the car
          @Description Price Per Day of the car
          @Example 10000
        example: 10000
        type: number
      price_per_month:
        description: |-
          Price Per Month of the car
          @Description Price Per Month of the car
          @Example 40000
        example: 40000
        type: number
      price_per_week:
        description: |-
          Price Per Week of the car
          @Description Price Per Week of the car
          @Example 7000
        example: 7000
        type: number
      transmission:
        allOf:
        - $ref: '#/definitions/models.TransmissionType'
        description: |-
          Transmission type of the car
          @Description Transmission type of the car
          @Example "Automatic"
        enum:
        - Automatic
        - Manual
        example: Automatic
      year:
        description: |-
          Year of the car
          @Description Year of the car
          @Example 2023
        example: 2023
        type: integer
    required:
    - brand
    - category
    - description
    - is_available
    - license_plate
    - machine_number
    - model
    - name
    - price_per_day
    - price_per_month
    - price_per_week
    - transmission
    - year
    type: object
  requests.CreateProductRequest:
    description: Request payload for creating a new product
    properties:
      description:
        description: |-
          Description of the product
          @Description Description of the product
          @Example "This is a sample product description"
        example: This is a sample product description
        maxLength: 500
        minLength: 10
        type: string
      name:
        description: |-
          Name of the product
          @Description Name of the product
          @Example "Sample Product"
        example: Sample Product
        maxLength: 100
        minLength: 3
        type: string
    required:
    - description
    - name
    type: object
  requests.UpdateCarRequest:
    description: Request payload for updating a car
    properties:
      brand:
        allOf:
        - $ref: '#/definitions/models.Brand'
        description: |-
          Brand of the car
          @Description Brand of the car
          @Example "Toyota"
        enum:
        - Toyota
        - Honda
        - Mercedes
        - Wuling
        - Mitsubishi
        - Volkswagen
        - Jeep
        - Subaru
        - Hyundai
        - Kia
        - Renault
        - Volvo
        - Chevrolet
        - Ford
        - BMW
        example: Toyota
      category:
        allOf:
        - $ref: '#/definitions/models.CarCategory'
        description: |-
          Category of the car
          @Description Category of the car
          @Example "SUV"
        enum:
        - CityCar
        - LCGC
        - Compact
        - MPV
        - SUV
        - Crossover
        example: SUV
      description:
        description: |-
          Description of the car
          @Description Description of the car
          @Example "This is an updated car description"
        example: This is an updated car description
        maxLength: 500
        minLength: 10
        type: string
      is_available:
        description: |-
          Availability status of the car
          @Description Availability status of the car
          @Example true
        example: true
        type: boolean
      license_plate:
        description: |-
          License plate of the car
          @Description License plate of the car
          @Example "ABC123"
        example: ABC123
        maxLength: 10
        minLength: 3
        type: string
      machine_number:
        description: |-
          Machine number of the car
          @Description Machine number of the car
          @Example "123456"
        example: "123456"
        maxLength: 10
        minLength: 3
        type: string
      model:
        description: |-
          Model of the car
          @Description Model of the car
          @Example "Sample Model"
        example: Sample Model
        maxLength: 100
        minLength: 3
        type: string
      name:
        description: |-
          Name of the car
          @Description Name of the car
          @Example "Updated Car"
        example: Updated Car
        maxLength: 100
        minLength: 3
        type: string
      price_per_day:
        description: |-
          Price Per Day of the car
          @Description Price Per Day of the car
          @Example 10000
        example: 10000
        type: number
      price_per_month:
        description: |-
          Price Per Month of the car
          @Description Price Per Month of the car
          @Example 40000
        example: 40000
        type: number
      price_per_week:
        description: |-
          Price Per Week of the car
          @Description Price Per Week of the car
          @Example 7000
        example: 7000
        type: number
      transmission:
        allOf:
        - $ref: '#/definitions/models.TransmissionType'
        description: |-
          Transmission type of the car
          @Description Transmission type of the car
          @Example "Automatic"
        enum:
        - Automatic
        - Manual
        example: Automatic
      year:
        description: |-
          Year of the car
          @Description Year of the car
          @Example 2023
        example: 2023
        type: integer
    type: object
  requests.UpdateProductRequest:
    description: Request payload for updating a product
    properties:
      description:
        description: |-
          Description of the product
          @Description Description of the product
          @Example "This is an updated product description"
        example: This is an updated product description
        maxLength: 500
        minLength: 10
        type: string
      name:
        description: |-
          Name of the product
          @Description Name of the product
          @Example "Updated Product"
        example: Updated Product
        maxLength: 100
        minLength: 3
        type: string
    type: object
  responses.CarResponse:
    description: Car response structure
    properties:
      brand:
        allOf:
        - $ref: '#/definitions/models.Brand'
        description: |-
          Brand of the car
          @Description Brand of the car
          @Example "Toyota"
        example: Toyota
      category:
        allOf:
        - $ref: '#/definitions/models.CarCategory'
        description: |-
          Category of the car
          @Description Category of the car
          @Example "CityCar"
        example: CityCar
      created_at:
        description: |-
          Creation timestamp
          @Description Creation timestamp
          @Example "2023-01-01T00:00:00Z"
        example: "2023-01-01T00:00:00Z"
        type: string
      description:
        description: |-
          Description of the car
          @Description Description of the car
          @Example "Comfortable family car with spacious interior"
        example: Comfortable family car with spacious interior
        type: string
      id:
        description: |-
          Primary key
          @Description Unique identifier
          @Example 1
        example: 1
        type: integer
      is_available:
        description: |-
          Availability status
          @Description Whether the car is available for rent
          @Example true
        example: true
        type: boolean
      license_plate:
        description: |-
          License plate
          @Description License plate number
          @Example "B 1234 ABC"
        example: B 1234 ABC
        type: string
      machine_number:
        description: |-
          Machine number
          @Description Machine/engine number
          @Example "ABC123456789"
        example: ABC123456789
        type: string
      model:
        description: |-
          Model of the car
          @Description Model of the car
          @Example "Avanza"
        example: Avanza
        type: string
      name:
        description: |-
          Name of the car
          @Description Name of the car
          @Example "Toyota Avanza"
        example: Toyota Avanza
        type: string
      price_per_day:
        description: |-
          Price per day
          @Description Price per day in IDR
          @Example 300000
        example: 300000
        type: number
      price_per_month:
        description: |-
          Price per month
          @Description Price per month in IDR
          @Example 7000000
        example: 7000000
        type: number
      price_per_week:
        description: |-
          Price per week
          @Description Price per week in IDR
          @Example 1800000
        example: 1800000
        type: number
      transmission:
        allOf:
        - $ref: '#/definitions/models.TransmissionType'
        description: |-
          Transmission type
          @Description Transmission type
          @Example "Automatic"
        example: Automatic
      updated_at:
        description: |-
          Last update timestamp
          @Description Last update timestamp
          @Example "2023-01-01T00:00:00Z"
        example: "2023-01-01T00:00:00Z"
        type: string
      year:
        description: |-
          Year of the car
          @Description Year of the car
          @Example 2022
        example: 2022
        type: integer
    type: object
  responses.CarsListResponse:
    description: Paginated list response for cars
    properties:
      data:
        description: |-
          List of cars
          @Description Array of car data
        items:
          $ref: '#/definitions/responses.CarResponse'
        type: array
      pagination:
        allOf:
        - $ref: '#/definitions/utils.PaginationMeta'
        description: |-
          Pagination metadata
          @Description Pagination information
    type: object
  services.AuthResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/services.UserResponse'
    type: object
  services.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  services.RegisterRequest:
    properties:
      email:
        type: string
      full_name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        minLength: 8
        type: string
      phone_number:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - full_name
    - password
    - phone_number
    - username
    type: object
  services.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      permissions:
        items:
          type: string
        type: array
      phone_number:
        type: string
      roles:
        items:
          type: string
        type: array
      status:
        type: string
      username:
        type: string
    type: object
  utils.ErrorResponse:
    description: Error response format
    properties:
      error:
        example: Detailed error information
        type: string
      message:
        example: Error message
        type: string
      success:
        example: false
        type: boolean
    type: object
  utils.PaginationMeta:
    description: Pagination metadata structure
    properties:
      has_next:
        description: |-
          Has next page
          @Description Whether there is a next page
          @Example true
        example: true
        type: boolean
      has_prev:
        description: |-
          Has previous page
          @Description Whether there is a previous page
          @Example false
        example: false
        type: boolean
      limit:
        description: |-
          Items per page
          @Description Number of items per page
          @Example 10
        example: 10
        type: integer
      page:
        description: |-
          Current page number
          @Description Current page number
          @Example 1
        example: 1
        type: integer
      total:
        description: |-
          Total number of items
          @Description Total number of items
          @Example 100
        example: 100
        type: integer
      total_pages:
        description: |-
          Total number of pages
          @Description Total number of pages
          @Example 10
        example: 10
        type: integer
    type: object
  utils.SuccessResponse:
    description: Success response format
    properties:
      message:
        example: Operation completed successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A RESTful API management system
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: RESTful API GO
  version: "1.0"
paths:
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change current user's password
      parameters:
      - description: Password change data
        in: body
        name: password
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - Authentication
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Initiate password reset process
      parameters:
      - description: Email address
        in: body
        name: email
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Forgot password
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username/email and password
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/services.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Revoke user's refresh token
      parameters:
      - description: Refresh token
        in: body
        name: logout
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - Authentication
  /auth/logout-all:
    post:
      consumes:
      - application/json
      description: Revoke all user's refresh tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Logout from all devices
      tags:
      - Authentication
  /auth/profile:
    get:
      consumes:
      - application/json
      description: Get current user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Authentication
    put:
      consumes:
      - application/json
      description: Update current user's profile information
      parameters:
      - description: Profile updates
        in: body
        name: profile
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access and refresh tokens using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Refresh access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration data
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/services.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: User registration
      tags:
      - Authentication
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset password using reset token
      parameters:
      - description: Reset token and new password
        in: body
        name: reset
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Reset password
      tags:
      - Authentication
  /auth/stats:
    get:
      consumes:
      - application/json
      description: Get authentication-related statistics (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get authentication statistics
      tags:
      - Authentication
  /auth/tokens:
    get:
      consumes:
      - application/json
      description: Get current user's active refresh tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user tokens
      tags:
      - Authentication
  /auth/tokens/{id}/revoke:
    post:
      consumes:
      - application/json
      description: Revoke a specific refresh token
      parameters:
      - description: Token ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Revoke token
      tags:
      - Authentication
  /auth/validate:
    get:
      consumes:
      - application/json
      description: Validate access token and return user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Validate token
      tags:
      - Authentication
  /auth/verify-email:
    get:
      consumes:
      - application/json
      description: Verify user email using verification token
      parameters:
      - description: Verification token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Verify email
      tags:
      - Authentication
  /cars:
    get:
      consumes:
      - application/json
      description: Get a list of cars with optional pagination and filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by availability
        in: query
        name: available
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CarsListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all cars
      tags:
      - cars
    post:
      consumes:
      - application/json
      description: Create a new car with the provided information
      parameters:
      - description: Car creation request
        in: body
        name: car
        required: true
        schema:
          $ref: '#/definitions/requests.CreateCarRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create a new car
      tags:
      - cars
  /cars/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a car by its ID
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Delete a car
      tags:
      - cars
    get:
      consumes:
      - application/json
      description: Get a single car by its ID
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CarResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get a car by ID
      tags:
      - cars
    put:
      consumes:
      - application/json
      description: Update an existing car with the provided information
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: integer
      - description: Car update request
        in: body
        name: car
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateCarRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update a car
      tags:
      - cars
  /products:
    get:
      consumes:
      - application/json
      description: Get a list of products with optional pagination and filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with the provided information
      parameters:
      - description: Product creation request
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/requests.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a single product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get a product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product with the provided information
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product update request
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update a product
      tags:
      - products
  /rbac/assign-role:
    post:
      consumes:
      - application/json
      description: Assign a role to a user
      parameters:
      - description: Role assignment data
        in: body
        name: assignment
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Assign role to user
      tags:
      - RBAC
  /rbac/initialize:
    post:
      consumes:
      - application/json
      description: Initialize default system roles and permissions (super admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Initialize system roles
      tags:
      - RBAC
  /rbac/permissions:
    get:
      consumes:
      - application/json
      description: Get list of all available permissions
      parameters:
      - description: Filter by permission category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Permission'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all permissions
      tags:
      - RBAC
    post:
      consumes:
      - application/json
      description: Create a new permission (admin only)
      parameters:
      - description: Permission data
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/models.Permission'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Permission'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create new permission
      tags:
      - RBAC
  /rbac/remove-role:
    post:
      consumes:
      - application/json
      description: Remove a role from a user
      parameters:
      - description: Role removal data
        in: body
        name: assignment
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove role from user
      tags:
      - RBAC
  /rbac/roles:
    get:
      consumes:
      - application/json
      description: Get list of all roles with optional filtering
      parameters:
      - description: Include permissions in response
        in: query
        name: include_permissions
        type: boolean
      - description: Filter by parent role ID
        in: query
        name: parent_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - RBAC
    post:
      consumes:
      - application/json
      description: Create a new role with specified permissions
      parameters:
      - description: Role data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create new role
      tags:
      - RBAC
  /rbac/roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a role (cannot delete system roles)
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete role
      tags:
      - RBAC
    get:
      consumes:
      - application/json
      description: Get a specific role by its ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get role by ID
      tags:
      - RBAC
    put:
      consumes:
      - application/json
      description: Update an existing role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role updates
        in: body
        name: role
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update role
      tags:
      - RBAC
  /rbac/roles/{id}/permissions:
    delete:
      consumes:
      - application/json
      description: Remove a permission from a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Permission name
        in: body
        name: permission
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove permission from role
      tags:
      - RBAC
    post:
      consumes:
      - application/json
      description: Assign a permission to a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Permission name
        in: body
        name: permission
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Assign permission to role
      tags:
      - RBAC
  /rbac/users/{id}/check-permission:
    get:
      consumes:
      - application/json
      description: Check if a user has a specific permission
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Permission name
        in: query
        name: permission
        required: true
        type: string
      - description: Resource identifier
        in: query
        name: resource
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Check user permission
      tags:
      - RBAC
  /rbac/users/{id}/roles:
    get:
      consumes:
      - application/json
      description: Get all roles assigned to a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user roles
      tags:
      - RBAC
schemes:
- http
- https
swagger: "2.0"
