{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "A RESTful API management system",
        "title": "RESTful API GO",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/auth/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change current user's password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "Password change data",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/forgot-password": {
            "post": {
                "description": "Initiate password reset process",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Forgot password",
                "parameters": [
                    {
                        "description": "Email address",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user with username/email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Revoke user's refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User logout",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "logout",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/logout-all": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Revoke all user's refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout from all devices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update current user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Profile updates",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Generate new access and refresh tokens using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "refresh",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/services.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "description": "Reset password using reset token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Reset token and new password",
                        "name": "reset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get authentication-related statistics (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get authentication statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/tokens": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user's active refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get user tokens",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/tokens/{id}/revoke": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Revoke a specific refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Revoke token",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Token ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/validate": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validate access token and return user info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Validate token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/verify-email": {
            "get": {
                "description": "Verify user email using verification token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Verification token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/cars": {
            "get": {
                "description": "Get a list of cars with optional pagination and filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Get all cars",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by availability",
                        "name": "available",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.CarsListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new car with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Create a new car",
                "parameters": [
                    {
                        "description": "Car creation request",
                        "name": "car",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateCarRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cars/{id}": {
            "get": {
                "description": "Get a single car by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Get a car by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.CarResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing car with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Update a car",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Car update request",
                        "name": "car",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateCarRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a car by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Delete a car",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "Get a list of products with optional pagination and filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get all products",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new product with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Create a new product",
                "parameters": [
                    {
                        "description": "Product creation request",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "description": "Get a single product by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get a product by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing product with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Update a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product update request",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a product by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Delete a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rbac/assign-role": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign a role to a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Assign role to user",
                "parameters": [
                    {
                        "description": "Role assignment data",
                        "name": "assignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/rbac/initialize": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Initialize default system roles and permissions (super admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Initialize system roles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/rbac/permissions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of all available permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Get all permissions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by permission category",
                        "name": "category",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Permission"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new permission (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Create new permission",
                "parameters": [
                    {
                        "description": "Permission data",
                        "name": "permission",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Permission"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Permission"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/rbac/remove-role": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a role from a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Remove role from user",
                "parameters": [
                    {
                        "description": "Role removal data",
                        "name": "assignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/rbac/roles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of all roles with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Get all roles",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Include permissions in response",
                        "name": "include_permissions",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by parent role ID",
                        "name": "parent_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Role"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new role with specified permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Create new role",
                "parameters": [
                    {
                        "description": "Role data",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/rbac/roles/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific role by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Get role by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Update role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role updates",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a role (cannot delete system roles)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Delete role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/rbac/roles/{id}/permissions": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign a permission to a role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Assign permission to role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permission name",
                        "name": "permission",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a permission from a role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Remove permission from role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permission name",
                        "name": "permission",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/rbac/users/{id}/check-permission": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check if a user has a specific permission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Check user permission",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Permission name",
                        "name": "permission",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource identifier",
                        "name": "resource",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/rbac/users/{id}/roles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all roles assigned to a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBAC"
                ],
                "summary": "Get user roles",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Role"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Brand": {
            "type": "string",
            "enum": [
                "Toyota",
                "Honda",
                "Mercedes",
                "Wuling",
                "Mitsubishi",
                "Volkswagen",
                "Jeep",
                "Subaru",
                "Hyundai",
                "Kia",
                "Renault",
                "Volvo",
                "Chevrolet",
                "Ford",
                "BMW"
            ],
            "x-enum-varnames": [
                "Toyota",
                "Honda",
                "Mercedes",
                "Wuling",
                "Mitsubishi",
                "Volkswagen",
                "Jeep",
                "Subaru",
                "Hyundai",
                "Kia",
                "Renault",
                "Volvo",
                "Chevrolet",
                "Ford",
                "BMW"
            ]
        },
        "models.CarCategory": {
            "type": "string",
            "enum": [
                "City Car",
                "LCGC",
                "Compact",
                "MPV",
                "SUV",
                "Crossover"
            ],
            "x-enum-varnames": [
                "CityCar",
                "LCGC",
                "Compact",
                "MPV",
                "SUV",
                "Crossover"
            ]
        },
        "models.Permission": {
            "description": "Permission entity model for Role-Based Access Control",
            "type": "object",
            "required": [
                "action",
                "category",
                "display_name",
                "name"
            ],
            "properties": {
                "action": {
                    "description": "Permission action\n@Description Action type of the permission\n@Example \"create\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.PermissionAction"
                        }
                    ],
                    "example": "create"
                },
                "category": {
                    "description": "Permission category\n@Description Category of the permission\n@Example \"user\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.PermissionCategory"
                        }
                    ],
                    "example": "user"
                },
                "created_at": {
                    "description": "Timestamps\n@Description Creation timestamp\n@Example \"2023-01-01T00:00:00Z\"",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "description": {
                    "description": "Permission description\n@Description Description of what this permission allows\n@Example \"Allows creating new users in the system\"",
                    "type": "string",
                    "maxLength": 500,
                    "example": "Allows creating new users in the system"
                },
                "display_name": {
                    "description": "Permission display name\n@Description Human-readable permission name\n@Example \"Create User\"",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "example": "Create User"
                },
                "id": {
                    "description": "Primary key\n@Description Unique identifier\n@Example 1",
                    "type": "integer",
                    "example": 1
                },
                "is_active": {
                    "description": "Active status\n@Description Whether the permission is active\n@Example true",
                    "type": "boolean",
                    "example": true
                },
                "is_system": {
                    "description": "System permission flag (cannot be deleted)\n@Description Whether this is a system permission (cannot be deleted)\n@Example true",
                    "type": "boolean",
                    "example": true
                },
                "level": {
                    "description": "Permission level (for hierarchy)\n@Description Permission level for hierarchy (higher number = more privileged)\n@Example 10",
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 10
                },
                "name": {
                    "description": "Permission name (unique identifier)\n@Description Unique permission name\n@Example \"user.create\"",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "example": "user.create"
                },
                "resource": {
                    "description": "Resource pattern (for fine-grained permissions)\n@Description Resource pattern for fine-grained access control\n@Example \"users/*\" or \"cars/own\" or \"*\"",
                    "type": "string",
                    "maxLength": 100,
                    "example": "*"
                },
                "roles": {
                    "description": "Roles relationship\n@Description Roles that have this permission",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Role"
                    }
                },
                "updated_at": {
                    "description": "@Description Last update timestamp\n@Example \"2023-01-01T00:00:00Z\"",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                }
            }
        },
        "models.PermissionAction": {
            "type": "string",
            "enum": [
                "create",
                "read",
                "update",
                "delete",
                "manage",
                "all"
            ],
            "x-enum-varnames": [
                "PermissionActionCreate",
                "PermissionActionRead",
                "PermissionActionUpdate",
                "PermissionActionDelete",
                "PermissionActionManage",
                "PermissionActionAll"
            ]
        },
        "models.PermissionCategory": {
            "type": "string",
            "enum": [
                "user",
                "car",
                "product",
                "role",
                "system",
                "report"
            ],
            "x-enum-varnames": [
                "PermissionCategoryUser",
                "PermissionCategoryCar",
                "PermissionCategoryProduct",
                "PermissionCategoryRole",
                "PermissionCategorySystem",
                "PermissionCategoryReport"
            ]
        },
        "models.Role": {
            "description": "Role entity model for Role-Based Access Control",
            "type": "object",
            "required": [
                "display_name",
                "name"
            ],
            "properties": {
                "children": {
                    "description": "Child roles relationship\n@Description Child roles in hierarchy",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Role"
                    }
                },
                "created_at": {
                    "description": "Timestamps\n@Description Creation timestamp\n@Example \"2023-01-01T00:00:00Z\"",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "description": {
                    "description": "Role description\n@Description Description of the role\n@Example \"Full system administrator with all permissions\"",
                    "type": "string",
                    "maxLength": 500,
                    "example": "Full system administrator with all permissions"
                },
                "display_name": {
                    "description": "Role display name\n@Description Human-readable role name\n@Example \"Administrator\"",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "Administrator"
                },
                "id": {
                    "description": "Primary key\n@Description Unique identifier\n@Example 1",
                    "type": "integer",
                    "example": 1
                },
                "is_active": {
                    "description": "Active status\n@Description Whether the role is active\n@Example true",
                    "type": "boolean",
                    "example": true
                },
                "is_system": {
                    "description": "System role flag (cannot be deleted)\n@Description Whether this is a system role (cannot be deleted)\n@Example false",
                    "type": "boolean",
                    "example": false
                },
                "level": {
                    "description": "Role level for hierarchy\n@Description Role level for hierarchy (higher number = higher privilege)\n@Example 100",
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 0,
                    "example": 100
                },
                "name": {
                    "description": "Role name\n@Description Unique role name\n@Example \"admin\"",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "admin"
                },
                "parent": {
                    "description": "Parent role relationship\n@Description Parent role for hierarchy",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Role"
                        }
                    ]
                },
                "parent_id": {
                    "description": "Parent role ID for hierarchy\n@Description Parent role ID for role hierarchy\n@Example 1",
                    "type": "integer",
                    "example": 1
                },
                "permissions": {
                    "description": "Permissions relationship\n@Description Permissions assigned to this role",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Permission"
                    }
                },
                "type": {
                    "description": "Role type\n@Description Type of role (system or custom)\n@Example \"system\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.RoleType"
                        }
                    ],
                    "example": "system"
                },
                "updated_at": {
                    "description": "@Description Last update timestamp\n@Example \"2023-01-01T00:00:00Z\"",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "users": {
                    "description": "Users relationship\n@Description Users assigned to this role",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "models.RoleType": {
            "type": "string",
            "enum": [
                "system",
                "custom"
            ],
            "x-enum-varnames": [
                "RoleTypeSystem",
                "RoleTypeCustom"
            ]
        },
        "models.TransmissionType": {
            "type": "string",
            "enum": [
                "Automatic",
                "Manual"
            ],
            "x-enum-varnames": [
                "Automatic",
                "Manual"
            ]
        },
        "models.User": {
            "description": "User entity model for authentication",
            "type": "object",
            "required": [
                "email",
                "full_name",
                "username"
            ],
            "properties": {
                "created_at": {
                    "description": "Timestamps\n@Description Creation timestamp\n@Example \"2023-01-01T00:00:00Z\"",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "email": {
                    "description": "Email address\n@Description User's email address\n@Example \"john@example.com\"",
                    "type": "string",
                    "maxLength": 100,
                    "example": "john@example.com"
                },
                "email_verified": {
                    "description": "Email verification\n@Description Whether email is verified\n@Example true",
                    "type": "boolean",
                    "example": false
                },
                "full_name": {
                    "description": "Full name\n@Description User's full name\n@Example \"John Doe\"",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "John Doe"
                },
                "id": {
                    "description": "Primary key\n@Description Unique identifier\n@Example 1",
                    "type": "integer",
                    "example": 1
                },
                "last_login_at": {
                    "description": "Last login timestamp\n@Description Last login time\n@Example \"2023-01-01T00:00:00Z\"",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "phone_number": {
                    "description": "Phone number\n@Description User's phone number\n@Example \"+1234567890\"",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 10,
                    "example": "+1234567890"
                },
                "roles": {
                    "description": "Roles relationship\n@Description User's roles",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Role"
                    }
                },
                "status": {
                    "description": "User status\n@Description Current status of the user\n@Example \"active\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserStatus"
                        }
                    ],
                    "example": "active"
                },
                "updated_at": {
                    "description": "@Description Last update timestamp\n@Example \"2023-01-01T00:00:00Z\"",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "username": {
                    "description": "Username for login\n@Description Unique username for authentication\n@Example \"john_doe\"",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "john_doe"
                }
            }
        },
        "models.UserStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "suspended"
            ],
            "x-enum-varnames": [
                "UserStatusActive",
                "UserStatusInactive",
                "UserStatusSuspended"
            ]
        },
        "requests.CreateCarRequest": {
            "description": "Request payload for creating a new car",
            "type": "object",
            "required": [
                "brand",
                "category",
                "description",
                "is_available",
                "license_plate",
                "machine_number",
                "model",
                "name",
                "price_per_day",
                "price_per_month",
                "price_per_week",
                "transmission",
                "year"
            ],
            "properties": {
                "brand": {
                    "description": "Brand of the car\n@Description Brand of the car\n@Example \"Toyota\"",
                    "enum": [
                        "Toyota",
                        "Honda",
                        "Mercedes",
                        "Wuling",
                        "Mitsubishi",
                        "Volkswagen",
                        "Jeep",
                        "Subaru",
                        "Hyundai",
                        "Kia",
                        "Renault",
                        "Volvo",
                        "Chevrolet",
                        "Ford",
                        "BMW"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Brand"
                        }
                    ],
                    "example": "Toyota"
                },
                "category": {
                    "description": "Category of the car\n@Description Category of the car\n@Example \"SUV\"",
                    "enum": [
                        "CityCar",
                        "LCGC",
                        "Compact",
                        "MPV",
                        "SUV",
                        "Crossover"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CarCategory"
                        }
                    ],
                    "example": "SUV"
                },
                "description": {
                    "description": "Description of the car\n@Description Description of the car\n@Example \"This is a sample car description\"",
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 10,
                    "example": "This is a sample car description"
                },
                "is_available": {
                    "description": "Availability status of the car\n@Description Availability status of the car\n@Example true",
                    "type": "boolean",
                    "example": true
                },
                "license_plate": {
                    "description": "License plate of the car\n@Description License plate of the car\n@Example \"ABC123\"",
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 3,
                    "example": "ABC123"
                },
                "machine_number": {
                    "description": "Machine number of the car\n@Description Machine number of the car\n@Example \"123456\"",
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 3,
                    "example": "123456"
                },
                "model": {
                    "description": "Model of the car\n@Description Model of the car\n@Example \"Sample Model\"",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "example": "Sample Model"
                },
                "name": {
                    "description": "Name of the car\n@Description Name of the car\n@Example \"Sample Car\"",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "example": "Sample Car"
                },
                "price_per_day": {
                    "description": "Price Per Day of the car\n@Description Price Per Day of the car\n@Example 10000",
                    "type": "number",
                    "example": 10000
                },
                "price_per_month": {
                    "description": "Price Per Month of the car\n@Description Price Per Month of the car\n@Example 40000",
                    "type": "number",
                    "example": 40000
                },
                "price_per_week": {
                    "description": "Price Per Week of the car\n@Description Price Per Week of the car\n@Example 7000",
                    "type": "number",
                    "example": 7000
                },
                "transmission": {
                    "description": "Transmission type of the car\n@Description Transmission type of the car\n@Example \"Automatic\"",
                    "enum": [
                        "Automatic",
                        "Manual"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TransmissionType"
                        }
                    ],
                    "example": "Automatic"
                },
                "year": {
                    "description": "Year of the car\n@Description Year of the car\n@Example 2023",
                    "type": "integer",
                    "example": 2023
                }
            }
        },
        "requests.CreateProductRequest": {
            "description": "Request payload for creating a new product",
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Description of the product\n@Description Description of the product\n@Example \"This is a sample product description\"",
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 10,
                    "example": "This is a sample product description"
                },
                "name": {
                    "description": "Name of the product\n@Description Name of the product\n@Example \"Sample Product\"",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "example": "Sample Product"
                }
            }
        },
        "requests.UpdateCarRequest": {
            "description": "Request payload for updating a car",
            "type": "object",
            "properties": {
                "brand": {
                    "description": "Brand of the car\n@Description Brand of the car\n@Example \"Toyota\"",
                    "enum": [
                        "Toyota",
                        "Honda",
                        "Mercedes",
                        "Wuling",
                        "Mitsubishi",
                        "Volkswagen",
                        "Jeep",
                        "Subaru",
                        "Hyundai",
                        "Kia",
                        "Renault",
                        "Volvo",
                        "Chevrolet",
                        "Ford",
                        "BMW"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Brand"
                        }
                    ],
                    "example": "Toyota"
                },
                "category": {
                    "description": "Category of the car\n@Description Category of the car\n@Example \"SUV\"",
                    "enum": [
                        "CityCar",
                        "LCGC",
                        "Compact",
                        "MPV",
                        "SUV",
                        "Crossover"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CarCategory"
                        }
                    ],
                    "example": "SUV"
                },
                "description": {
                    "description": "Description of the car\n@Description Description of the car\n@Example \"This is an updated car description\"",
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 10,
                    "example": "This is an updated car description"
                },
                "is_available": {
                    "description": "Availability status of the car\n@Description Availability status of the car\n@Example true",
                    "type": "boolean",
                    "example": true
                },
                "license_plate": {
                    "description": "License plate of the car\n@Description License plate of the car\n@Example \"ABC123\"",
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 3,
                    "example": "ABC123"
                },
                "machine_number": {
                    "description": "Machine number of the car\n@Description Machine number of the car\n@Example \"123456\"",
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 3,
                    "example": "123456"
                },
                "model": {
                    "description": "Model of the car\n@Description Model of the car\n@Example \"Sample Model\"",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "example": "Sample Model"
                },
                "name": {
                    "description": "Name of the car\n@Description Name of the car\n@Example \"Updated Car\"",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "example": "Updated Car"
                },
                "price_per_day": {
                    "description": "Price Per Day of the car\n@Description Price Per Day of the car\n@Example 10000",
                    "type": "number",
                    "example": 10000
                },
                "price_per_month": {
                    "description": "Price Per Month of the car\n@Description Price Per Month of the car\n@Example 40000",
                    "type": "number",
                    "example": 40000
                },
                "price_per_week": {
                    "description": "Price Per Week of the car\n@Description Price Per Week of the car\n@Example 7000",
                    "type": "number",
                    "example": 7000
                },
                "transmission": {
                    "description": "Transmission type of the car\n@Description Transmission type of the car\n@Example \"Automatic\"",
                    "enum": [
                        "Automatic",
                        "Manual"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TransmissionType"
                        }
                    ],
                    "example": "Automatic"
                },
                "year": {
                    "description": "Year of the car\n@Description Year of the car\n@Example 2023",
                    "type": "integer",
                    "example": 2023
                }
            }
        },
        "requests.UpdateProductRequest": {
            "description": "Request payload for updating a product",
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the product\n@Description Description of the product\n@Example \"This is an updated product description\"",
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 10,
                    "example": "This is an updated product description"
                },
                "name": {
                    "description": "Name of the product\n@Description Name of the product\n@Example \"Updated Product\"",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "example": "Updated Product"
                }
            }
        },
        "responses.CarResponse": {
            "description": "Car response structure",
            "type": "object",
            "properties": {
                "brand": {
                    "description": "Brand of the car\n@Description Brand of the car\n@Example \"Toyota\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Brand"
                        }
                    ],
                    "example": "Toyota"
                },
                "category": {
                    "description": "Category of the car\n@Description Category of the car\n@Example \"CityCar\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CarCategory"
                        }
                    ],
                    "example": "CityCar"
                },
                "created_at": {
                    "description": "Creation timestamp\n@Description Creation timestamp\n@Example \"2023-01-01T00:00:00Z\"",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "description": {
                    "description": "Description of the car\n@Description Description of the car\n@Example \"Comfortable family car with spacious interior\"",
                    "type": "string",
                    "example": "Comfortable family car with spacious interior"
                },
                "id": {
                    "description": "Primary key\n@Description Unique identifier\n@Example 1",
                    "type": "integer",
                    "example": 1
                },
                "is_available": {
                    "description": "Availability status\n@Description Whether the car is available for rent\n@Example true",
                    "type": "boolean",
                    "example": true
                },
                "license_plate": {
                    "description": "License plate\n@Description License plate number\n@Example \"B 1234 ABC\"",
                    "type": "string",
                    "example": "B 1234 ABC"
                },
                "machine_number": {
                    "description": "Machine number\n@Description Machine/engine number\n@Example \"ABC123456789\"",
                    "type": "string",
                    "example": "ABC123456789"
                },
                "model": {
                    "description": "Model of the car\n@Description Model of the car\n@Example \"Avanza\"",
                    "type": "string",
                    "example": "Avanza"
                },
                "name": {
                    "description": "Name of the car\n@Description Name of the car\n@Example \"Toyota Avanza\"",
                    "type": "string",
                    "example": "Toyota Avanza"
                },
                "price_per_day": {
                    "description": "Price per day\n@Description Price per day in IDR\n@Example 300000",
                    "type": "number",
                    "example": 300000
                },
                "price_per_month": {
                    "description": "Price per month\n@Description Price per month in IDR\n@Example 7000000",
                    "type": "number",
                    "example": 7000000
                },
                "price_per_week": {
                    "description": "Price per week\n@Description Price per week in IDR\n@Example 1800000",
                    "type": "number",
                    "example": 1800000
                },
                "transmission": {
                    "description": "Transmission type\n@Description Transmission type\n@Example \"Automatic\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TransmissionType"
                        }
                    ],
                    "example": "Automatic"
                },
                "updated_at": {
                    "description": "Last update timestamp\n@Description Last update timestamp\n@Example \"2023-01-01T00:00:00Z\"",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "year": {
                    "description": "Year of the car\n@Description Year of the car\n@Example 2022",
                    "type": "integer",
                    "example": 2022
                }
            }
        },
        "responses.CarsListResponse": {
            "description": "Paginated list response for cars",
            "type": "object",
            "properties": {
                "data": {
                    "description": "List of cars\n@Description Array of car data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.CarResponse"
                    }
                },
                "pagination": {
                    "description": "Pagination metadata\n@Description Pagination information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.PaginationMeta"
                        }
                    ]
                }
            }
        },
        "services.AuthResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/services.UserResponse"
                }
            }
        },
        "services.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "services.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "full_name",
                "password",
                "phone_number",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "phone_number": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "services.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "phone_number": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "utils.ErrorResponse": {
            "description": "Error response format",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Detailed error information"
                },
                "message": {
                    "type": "string",
                    "example": "Error message"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "utils.PaginationMeta": {
            "description": "Pagination metadata structure",
            "type": "object",
            "properties": {
                "has_next": {
                    "description": "Has next page\n@Description Whether there is a next page\n@Example true",
                    "type": "boolean",
                    "example": true
                },
                "has_prev": {
                    "description": "Has previous page\n@Description Whether there is a previous page\n@Example false",
                    "type": "boolean",
                    "example": false
                },
                "limit": {
                    "description": "Items per page\n@Description Number of items per page\n@Example 10",
                    "type": "integer",
                    "example": 10
                },
                "page": {
                    "description": "Current page number\n@Description Current page number\n@Example 1",
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "description": "Total number of items\n@Description Total number of items\n@Example 100",
                    "type": "integer",
                    "example": 100
                },
                "total_pages": {
                    "description": "Total number of pages\n@Description Total number of pages\n@Example 10",
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "utils.SuccessResponse": {
            "description": "Success response format",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        }
    }
}